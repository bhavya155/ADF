{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-nov-instant"
		},
		"SqlServeronprem_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServeronprem'",
			"defaultValue": "integrated security=True;Data Source=DAMU\\SQLEXPRESS;Initial Catalog=Devdbonprem"
		},
		"SqlServeronprem_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServeronprem'"
		},
		"ls_adls_servicePrincipalCredential": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalCredential' of 'ls_adls'"
		},
		"ls_bhavya_cloud_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_bhavya_cloud'"
		},
		"ls_bhavya_db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_bhavya_db'",
			"defaultValue": "integrated security=True;Data Source=DAMU\\SQLEXPRESS;Initial Catalog=bhavya"
		},
		"ls_bhavya_db_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_bhavya_db'"
		},
		"ls_blob_servicePrincipalCredential": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalCredential' of 'ls_blob'"
		},
		"ls_sqlserver_cloud_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_sqlserver_cloud'"
		},
		"SqlServeronprem_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DAMU\\Bhavya"
		},
		"ls_Http_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/"
		},
		"ls_Http_covid_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().baseurl}"
		},
		"ls_adls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://devsepdeadls.dfs.core.windows.net/"
		},
		"ls_adls_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "4b72edec-8a44-4971-b53a-558cd37e644b"
		},
		"ls_adls_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "755ac51f-aa2f-4092-a3d6-c4f0bf381238"
		},
		"ls_bhavya_db_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DAMU\\Bhavya"
		},
		"ls_blob_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://devsepblob.blob.core.windows.net"
		},
		"ls_blob_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "4b72edec-8a44-4971-b53a-558cd37e644b"
		},
		"ls_blob_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "755ac51f-aa2f-4092-a3d6-c4f0bf381238"
		},
		"ls_sqlserver_cloud_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlserver-cloud.database.windows.net"
		},
		"ls_sqlserver_cloud_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "dev_sep_db"
		},
		"ls_sqlserver_cloud_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "adadmin"
		},
		"blob_storage_trigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/2f51fd5c-cddf-4fd5-b752-cdbdfae56f87/resourceGroups/rs-nov-df/providers/Microsoft.Storage/storageAccounts/devsepblob"
		},
		"trigger1_properties_pipeline_parameters_window_start": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime"
		},
		"trigger1_properties_pipeline_parameters_window_end": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowEndTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Pl_ingestion_blob_adls_covid')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_blob_csv",
											"type": "DatasetReference",
											"parameters": {
												"container_name": "population",
												"file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size",
											"columnCount",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get File Metadata').output.size,2000)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings",
															"copyBehavior": "PreserveHierarchy"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_blob_csv",
														"type": "DatasetReference",
														"parameters": {
															"container_name": "population",
															"file_name": {
																"value": "@activity('Get File Metadata').output.itemName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_adls_covid_destination",
														"type": "DatasetReference",
														"parameters": {
															"container_name": "raw/covid/population",
															"file_name": {
																"value": "@activity('Get File Metadata').output.itemName",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Delete",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Copy data1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "ds_blob_csv",
														"type": "DatasetReference",
														"parameters": {
															"container_name": "population",
															"file_name": {
																"value": "@activity('Get File Metadata').output.itemName",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob_container",
								"type": "DatasetReference",
								"parameters": {
									"container_name": "population"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob_container",
								"type": "DatasetReference",
								"parameters": {
									"container_name": "population"
								}
							},
							"timeout": "0.12:00:00",
							"sleep": 10,
							"childItems": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"file_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-28T16:00:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_container')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_covid_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bhavya_practice_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get metadata').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "onprem-cloud",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WM_Lookup_new",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "water_mark_lookup",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().TABLE_NAME} where @{item().WaterMark_Column}>'@{activity('water_mark_lookup').output.firstRow.WatermarkValue}' and\n@{item().WaterMark_Column}<='@{activity('WM_Lookup_new').output.firstRow.last_modified_at}'\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": {
													"value": "@item().MERGE_KEY",
													"type": "Expression"
												}
											},
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"validateDataConsistency": true,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_ss_bhavya_onprem",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_ss_bhavya_cloud",
											"type": "DatasetReference",
											"parameters": {
												"destinationtable": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "water_mark_lookup",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select WatermarkValue from watermarktable where TableName='@{item().TABLE_NAME}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_ss_bhavya_cloud",
											"type": "DatasetReference",
											"parameters": {
												"destinationtable": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Stored procedure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "onprem-cloud",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@{activity('WM_Lookup_new').output.firstRow.last_modified_at}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_bhavya_cloud",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "WM_Lookup_new",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(updated_at) as last_modified_at from @{item().TABLE_NAME}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_ss_bhavya_onprem",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "get metadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"table_list": {
						"type": "array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-16T06:45:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_metadata')]",
				"[concat(variables('factoryId'), '/datasets/ds_ss_bhavya_onprem')]",
				"[concat(variables('factoryId'), '/datasets/ds_ss_bhavya_cloud')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_bhavya_cloud')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv-silver_and_json-silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adls_csv",
								"type": "DatasetReference",
								"parameters": {
									"container_name": "raw/files"
								}
							},
							"fieldList": [
								"exists",
								"childItems",
								"itemName",
								"itemType",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(split(item().name,'.')[1],'csv') ",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy json",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": false,
															"wildcardFileName": {
																"value": "@activity('Get Metadata1').output.itemName",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings",
															"copyBehavior": "PreserveHierarchy"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": true,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_adls_csv",
														"type": "DatasetReference",
														"parameters": {
															"container_name": "raw/files"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_adls_csv",
														"type": "DatasetReference",
														"parameters": {
															"container_name": "silver/json"
														}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copycsv",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": false,
															"wildcardFileName": {
																"value": "@activity('Get Metadata1').output.itemName",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings",
															"copyBehavior": "PreserveHierarchy"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": true,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_adls_csv",
														"type": "DatasetReference",
														"parameters": {
															"container_name": "raw/files"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_adls_csv",
														"type": "DatasetReference",
														"parameters": {
															"container_name": "silver/csv"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adls_covid_destination",
											"type": "DatasetReference",
											"parameters": {
												"container_name": "raw/files",
												"file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"file_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-29T07:11:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_covid_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adls_csv",
								"type": "DatasetReference",
								"parameters": {
									"container_name": "raw/files"
								}
							},
							"fieldList": [
								"exists",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(split(item().name,'.')[1],'csv')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy data2",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"wildcardFileName": {
																"value": "@variables('test')",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings",
															"copyBehavior": "PreserveHierarchy"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_adls_csv",
														"type": "DatasetReference",
														"parameters": {
															"container_name": "raw/files"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_adls_csv",
														"type": "DatasetReference",
														"parameters": {
															"container_name": "silver/JSON"
														}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"wildcardFileName": {
																"value": "@variables('test')",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings",
															"copyBehavior": "PreserveHierarchy"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_adls_csv",
														"type": "DatasetReference",
														"parameters": {
															"container_name": "raw/files"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_adls_csv",
														"type": "DatasetReference",
														"parameters": {
															"container_name": "silver/CSV"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "test",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"test": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-29T07:36:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ECDC_metadatadriven_http')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "metadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_metadata_covid",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('metadata').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "MergeFiles"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_covid_http",
											"type": "DatasetReference",
											"parameters": {
												"relative_url": {
													"value": "@item().RELATIVE_URL",
													"type": "Expression"
												},
												"base_url": {
													"value": "@item().BASE_URL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls_covid_destination",
											"type": "DatasetReference",
											"parameters": {
												"container_name": "raw/covid",
												"file_name": {
													"value": "@item().FILE_NAME",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-24T11:08:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_metadata_covid')]",
				"[concat(variables('factoryId'), '/datasets/ds_covid_http')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_covid_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_cases_deaths_dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_covid_deaths",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"container_name": "raw",
										"file_name": "covid/cases_deaths"
									},
									"source2": {},
									"sink": {
										"container_name": "silver",
										"file_name": "covid/casesdeaths/report"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-29T05:28:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_covid_deaths')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_hospital_admission_dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_hospital_admissions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {
										"container_name": "raw",
										"file_name": " covid/Hospital_admissions_daily/report"
									},
									"Countrylookup": {},
									"dimdateLookup": {},
									"sinkDaily": {
										"container_name": "silver",
										"file_name": "covid/hospital_daily/report"
									},
									"sinkWeeklyStream": {
										"container_name": "silver",
										"file_name": "covid/hospital_weekly/report"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-26T15:01:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_hospital_admissions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_incremental_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"modifiedDatetimeStart": {
										"value": "@pipeline().parameters.window_start",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@pipeline().parameters.window_end",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adls_csv",
								"type": "DatasetReference",
								"parameters": {
									"container_name": "raw"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_csv",
								"type": "DatasetReference",
								"parameters": {
									"container_name": "silver"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"window_start": {
						"type": "string"
					},
					"window_end": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-26T13:48:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_movies_ingestion_pp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copymovies",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "movie",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movie",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "year",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "year",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Rating",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Rotton Tomato",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Rotton Tomato",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_movies_http",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_csv",
								"type": "DatasetReference",
								"parameters": {
									"container_name": "moviesdb/movies_db"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-29T05:31:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_movies_http')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_moviesdb_dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow_db",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_moviesdb",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {
										"container_name": "moviesdb"
									},
									"sinkStream": {
										"container_name": "silver"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"continueOnError": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-26T13:48:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_moviesdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_onprem_to_cloud_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_metadata_Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get_metadata_Lookup').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "watermark_lookup_old",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "watermark_lookup_new",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "Select * from @{item().TABLE_NAME} where @{item().WaterMark_Column}> '@{activity('watermark_lookup_old').output.firstRow.WatermarkValue}' and @{item().WaterMark_Column}<='@{activity('watermark_lookup_new').output.firstRow.newwm}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": {
													"value": "@item().MERGE_KEY",
													"type": "Expression"
												}
											},
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"validateDataConsistency": true,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_sqlserver_onprem",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_sqlserver_cloud",
											"type": "DatasetReference",
											"parameters": {
												"Dest_Table_Name": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "watermark_lookup_old",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select WatermarkValue from watermarktable where TableName='@{item().TABLE_NAME}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sqlserver_cloud",
											"type": "DatasetReference",
											"parameters": {
												"Dest_Table_Name": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@activity('watermark_lookup_new').output.firstRow.newwm",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_sqlserver_cloud",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "watermark_lookup_new",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(@{item().WaterMark_Column}) as newwm from @{item().TABLE_NAME}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"isolationLevel": "ReadCommitted",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sqlserver_onprem",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "get_metadata_Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-29T05:31:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_metadata')]",
				"[concat(variables('factoryId'), '/datasets/ds_sqlserver_onprem')]",
				"[concat(variables('factoryId'), '/datasets/ds_sqlserver_cloud')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sqlserver_cloud')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_processedfiles_to_azuresql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupFiles').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get MetadataFiles",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adls_csv",
											"type": "DatasetReference",
											"parameters": {
												"container_name": {
													"value": "@item().CONTAINER_NAME",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists",
											"childItems",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Copy dataADLStoSQLDB",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get MetadataFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFileName": "*",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE @{item().DESTINATION_TABLE}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": true
										},
										"enableStaging": false,
										"validateDataConsistency": true,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_adls_csv",
											"type": "DatasetReference",
											"parameters": {
												"container_name": {
													"value": "@item().CONTAINER_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_sqlserver_cloud",
											"type": "DatasetReference",
											"parameters": {
												"Dest_Table_Name": {
													"value": "@item().DESTINATION_TABLE",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "LookupFiles",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_adls_json",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-28T15:07:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_sqlserver_cloud')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_tesing_dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_testing",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {
										"container_name": "raw",
										"file_name": "covid/Testing"
									},
									"countryLookup": {},
									"dimDateLookup": {},
									"sinkStream": {
										"container_name": "silver",
										"file_name": "covid/Testing/report"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-26T15:01:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_testing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ds_country_lookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "country_lookup",
						"folderPath": "covid/Lookup",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "country_code_2_digit",
						"type": "String"
					},
					{
						"name": "country_code_3_digit",
						"type": "String"
					},
					{
						"name": "continent",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_covid_destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container_name": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "config_covid.json",
						"folderPath": "config_adls_sql",
						"fileSystem": "silver"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"CONTAINER_NAME": {
							"type": "string"
						},
						"DESTINATION_TABLE": {
							"type": "string"
						},
						"MERGE_KEY": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_container')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container_name": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_covid_http')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Http_covid",
					"type": "LinkedServiceReference",
					"parameters": {
						"baseurl": {
							"value": "@dataset().base_url",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"relative_url": {
						"type": "string"
					},
					"base_url": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().relative_url",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_Http_covid')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dim_date_lookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dim_date_lookup",
						"folderPath": "covid/Lookup",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "date_key",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "month",
						"type": "String"
					},
					{
						"name": "day",
						"type": "String"
					},
					{
						"name": "day_name",
						"type": "String"
					},
					{
						"name": "day_of_year",
						"type": "String"
					},
					{
						"name": "week_of_month",
						"type": "String"
					},
					{
						"name": "week_of_year",
						"type": "String"
					},
					{
						"name": "month_name",
						"type": "String"
					},
					{
						"name": "year_month",
						"type": "String"
					},
					{
						"name": "year_week",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "metadata.json",
						"fileSystem": "config"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"TABLE_NAME": {
							"type": "string"
						},
						"WaterMark_Column": {
							"type": "string"
						},
						"MERGE_KEY": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_metadata_covid')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "metadata_covid.json",
						"folderPath": "covid/config",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_movies_http')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Http",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "akjainade/akjain-adf/master/moviesDB.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_Http')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sqlserver_cloud')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqlserver_cloud",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Dest_Table_Name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"table": {
						"value": "@dataset().Dest_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sqlserver_cloud')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sqlserver_onprem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServeronprem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "category_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "category_name",
						"type": "varchar"
					},
					{
						"name": "created_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "updated_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CATEGORIES"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServeronprem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ss_bhavya_cloud')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_bhavya_cloud",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"destinationtable": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": {
						"value": "@dataset().destinationtable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_bhavya_cloud')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ss_bhavya_onprem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_bhavya_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "first_name",
						"type": "nvarchar"
					},
					{
						"name": "last_name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "updated_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_bhavya_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServeronprem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServeronprem_connectionString')]",
					"userName": "[parameters('SqlServeronprem_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServeronprem_password')]"
					}
				},
				"connectVia": {
					"referenceName": "Azure-IR-Onprem",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-Onprem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_Http')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_Http_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_Http_covid')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"baseurl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_Http_covid_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adls_properties_typeProperties_url')]",
					"tenant": "[parameters('ls_adls_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('ls_adls_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalCredential": {
						"type": "SecureString",
						"value": "[parameters('ls_adls_servicePrincipalCredential')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_bhavya_cloud')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_bhavya_cloud_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_bhavya_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_bhavya_db_connectionString')]",
					"userName": "[parameters('ls_bhavya_db_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_bhavya_db_password')]"
					}
				},
				"connectVia": {
					"referenceName": "Azure-IR-Onprem",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-Onprem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('ls_blob_properties_typeProperties_serviceEndpoint')]",
					"tenant": "[parameters('ls_blob_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('ls_blob_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalCredential": {
						"type": "SecureString",
						"value": "[parameters('ls_blob_servicePrincipalCredential')]"
					},
					"accountKind": "BlobStorage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sqlserver_cloud')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('ls_sqlserver_cloud_properties_typeProperties_server')]",
					"database": "[parameters('ls_sqlserver_cloud_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_sqlserver_cloud_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_sqlserver_cloud_password')]"
					}
				},
				"connectVia": {
					"referenceName": "Azure-IR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_storage_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Pl_ingestion_blob_adls_covid",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/population/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('blob_storage_trigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Pl_ingestion_blob_adls_covid')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/shedule_trigger_everylast_day_ofmonth')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_ECDC_metadatadriven_http",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2024-10-28T16:11:00",
						"endTime": "2024-12-31T00:00:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								12
							],
							"monthDays": [
								-1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_ECDC_metadatadriven_http')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pl_incremental_file",
						"type": "PipelineReference"
					},
					"parameters": {
						"window_start": "[parameters('trigger1_properties_pipeline_parameters_window_start')]",
						"window_end": "[parameters('trigger1_properties_pipeline_parameters_window_end')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2024-10-17T10:49:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_incremental_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR-Onprem')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "South India",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_covid_deaths')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_covid_destination",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_covid_destination",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "pivot1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as integer,",
						"          indicator as string,",
						"          daily_count as short,",
						"          date as date,",
						"          rate_14_day as double,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     wildcardPaths:['covid/cases_deaths']) ~> source1",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     wildcardPaths:['/covid/country_lookup']) ~> source2",
						"source1 select(mapColumn(",
						"          country,",
						"          country_code_3_digit = country_code,",
						"          population,",
						"          indicator,",
						"          daily_count,",
						"          reported_date = date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 pivot(groupBy(country,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          source),",
						"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
						"     count = sum(daily_count),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1, source2 lookup(pivot1@country == source2@country,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          country = pivot1@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit = pivot1@country_code_3_digit,",
						"          population = pivot1@population,",
						"          cases_count = {countconfirmed cases},",
						"          deaths_count = countdeaths,",
						"          reported_date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:'cases_deaths',",
						"     umask: 0076,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_covid_destination')]",
				"[concat(variables('factoryId'), '/datasets/Ds_country_lookup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_hospital_admissions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_covid_destination",
								"type": "DatasetReference"
							},
							"name": "source",
							"description": "hospital admission dataset"
						},
						{
							"dataset": {
								"referenceName": "Ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "Countrylookup"
						},
						{
							"dataset": {
								"referenceName": "ds_dim_date_lookup",
								"type": "DatasetReference"
							},
							"name": "dimdateLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_covid_destination",
								"type": "DatasetReference"
							},
							"name": "sinkDaily"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_covid_destination",
								"type": "DatasetReference"
							},
							"name": "sinkWeeklyStream"
						}
					],
					"transformations": [
						{
							"name": "selectReqCol"
						},
						{
							"name": "lookupStream"
						},
						{
							"name": "selectStream"
						},
						{
							"name": "splitStream"
						},
						{
							"name": "pivotStream"
						},
						{
							"name": "sortStream"
						},
						{
							"name": "derivedColumn"
						},
						{
							"name": "aggregateStream"
						},
						{
							"name": "joinStream"
						},
						{
							"name": "pivotWeeklyStream"
						},
						{
							"name": "sortWeelyStream"
						},
						{
							"name": "Finalselect"
						},
						{
							"name": "selectWeeklyFinal"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as date,",
						"          year_week as string,",
						"          value as double,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     wildcardPaths:['covid/Hospital_admissions']) ~> source",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Countrylookup",
						"source(output(",
						"          date_key as string,",
						"          date as string,",
						"          year as string,",
						"          month as string,",
						"          day as string,",
						"          day_name as string,",
						"          day_of_year as string,",
						"          week_of_month as string,",
						"          week_of_year as string,",
						"          month_name as string,",
						"          year_month as string,",
						"          year_week as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     wildcardPaths:['covid/dim_date_lookup']) ~> dimdateLookup",
						"source select(mapColumn(",
						"          country,",
						"          indicator,",
						"          reported_date = date,",
						"          reported_year_week = year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqCol",
						"selectReqCol, Countrylookup lookup(selectReqCol@country == Countrylookup@country,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookupStream",
						"lookupStream select(mapColumn(",
						"          country = selectReqCol@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          indicator,",
						"          reported_date,",
						"          reported_year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectStream",
						"selectStream split(substring(indicator,1,instr(indicator,' '))=='Daily ',",
						"     disjoint: false) ~> splitStream@(DailyStream, Weeklystream)",
						"splitStream@DailyStream pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          source),",
						"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
						"     {} = sum(value),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivotStream",
						"pivotStream sort(desc(reported_date, false)) ~> sortStream",
						"dimdateLookup derive(year_week_date = year + '-W' + right(year_week,2)) ~> derivedColumn",
						"derivedColumn aggregate(groupBy(year_week_date),",
						"     reported_week_start_date = min(date),",
						"          reported_week_end_date = max(date)) ~> aggregateStream",
						"splitStream@Weeklystream, aggregateStream join(reported_year_week == year_week_date,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinStream",
						"joinStream pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          reported_year_week,",
						"          reported_week_start_date,",
						"          reported_week_end_date,",
						"          source,",
						"          population),",
						"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
						"     {} = sum(value),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivotWeeklyStream",
						"pivotWeeklyStream sort(desc(reported_year_week, false)) ~> sortWeelyStream",
						"sortStream select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          Daily_hospital_occupancy = {Daily hospital occupancy},",
						"          Daily_ICU_occupancy = {Daily ICU occupancy},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Finalselect",
						"sortWeelyStream select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          reported_year_week,",
						"          reported_week_start_date,",
						"          reported_week_end_date,",
						"          new_hospital_occupancy_count = {Weekly new hospital admissions per 100k},",
						"          new_ICU_occupancy_count = {Weekly new ICU admissions per 100k},",
						"          source,",
						"          population",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWeeklyFinal",
						"Finalselect sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['hospital_daily_report'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkDaily",
						"selectWeeklyFinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:'hospital_weekly_report',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkWeeklyStream"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_covid_destination')]",
				"[concat(variables('factoryId'), '/datasets/Ds_country_lookup')]",
				"[concat(variables('factoryId'), '/datasets/ds_dim_date_lookup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_moviesdb')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_csv",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_csv",
								"type": "DatasetReference"
							},
							"name": "sinkStream",
							"rejectedDataLinkedService": {
								"referenceName": "ls_adls",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "selectstream",
							"description": "omato'"
						},
						{
							"name": "filterStream"
						},
						{
							"name": "derivedGenreStream"
						},
						{
							"name": "selectSteam"
						},
						{
							"name": "windowStream"
						},
						{
							"name": "aggregateStream"
						},
						{
							"name": "DataQualityCheck"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as integer,",
						"          title as string,",
						"          genres as string,",
						"          year as short,",
						"          Rating as short,",
						"          {Rotton Tomato} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: ['movies_db','archive'],",
						"     wildcardPaths:['/movies_db']) ~> source",
						"source select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          {Rotten Tomato} = {Rotton Tomato}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> selectstream",
						"selectstream filter(year>1910 && year<2000) ~> filterStream",
						"filterStream derive({first genre} = case(instr(genres,'|')==0, genres, substring(genres,1,instr(genres,'|')-1))) ~> derivedGenreStream",
						"derivedGenreStream select(mapColumn(",
						"          movie,",
						"          title,",
						"          year,",
						"          {Rotten Tomato},",
						"          {first genre}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> selectSteam",
						"selectSteam window(over({first genre},",
						"          year),",
						"     asc({Rotten Tomato}, true),",
						"     asc(year, true),",
						"     rank = denseRank()) ~> windowStream",
						"windowStream aggregate(groupBy({first genre},",
						"          year),",
						"     max = max({Rotten Tomato}),",
						"          min = min({Rotten Tomato}),",
						"          avg = avg({Rotten Tomato}),",
						"          count = count({Rotten Tomato})) ~> aggregateStream",
						"aggregateStream assert(expectTrue(year<1950, true, 'qualitycheck', null, toString(year)+'greater than 1950')) ~> DataQualityCheck",
						"DataQualityCheck sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0074,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     outputAssertFailedRows: true,",
						"     assertFailure_fileSystem: 'moviesdb',",
						"     assertFailure_folderPath: 'error',",
						"     ignoreAssertFailedRows: true) ~> sinkStream"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_csv')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_testing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_covid_destination",
								"type": "DatasetReference"
							},
							"name": "source"
						},
						{
							"dataset": {
								"referenceName": "Ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "countryLookup"
						},
						{
							"dataset": {
								"referenceName": "ds_dim_date_lookup",
								"type": "DatasetReference"
							},
							"name": "dimDateLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_covid_destination",
								"type": "DatasetReference"
							},
							"name": "sinkStream"
						}
					],
					"transformations": [
						{
							"name": "lookupCountry"
						},
						{
							"name": "DerivedStreamYearweek"
						},
						{
							"name": "aggregateStream"
						},
						{
							"name": "joinStream"
						},
						{
							"name": "selectStream"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          year_week as string,",
						"          new_cases as integer,",
						"          tests_done as integer,",
						"          population as integer,",
						"          testing_rate as double,",
						"          positivity_rate as double,",
						"          testing_data_source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['covid/Testing']) ~> source",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['covid/country_lookup']) ~> countryLookup",
						"source(output(",
						"          date_key as string,",
						"          date as string,",
						"          year as string,",
						"          month as string,",
						"          day as string,",
						"          day_name as string,",
						"          day_of_year as string,",
						"          week_of_month as string,",
						"          week_of_year as string,",
						"          month_name as string,",
						"          year_month as string,",
						"          year_week as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['covid/dim_date_lookup']) ~> dimDateLookup",
						"source, countryLookup lookup(source@country == countryLookup@country,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookupCountry",
						"dimDateLookup derive(formatted_Year_week = year + '-W' + right(year_week,2)) ~> DerivedStreamYearweek",
						"DerivedStreamYearweek aggregate(groupBy(formatted_Year_week),",
						"     week_start_date = min(date),",
						"          week_end_date = max(date)) ~> aggregateStream",
						"lookupCountry, aggregateStream join(year_week == formatted_Year_week,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinStream",
						"joinStream select(mapColumn(",
						"          country,",
						"          year_week,",
						"          new_cases,",
						"          tests_done,",
						"          population,",
						"          testing_rate,",
						"          positivity_rate,",
						"          testing_data_source,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          week_start_date,",
						"          week_end_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectStream",
						"selectStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:'testingreport',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkStream"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_covid_destination')]",
				"[concat(variables('factoryId'), '/datasets/Ds_country_lookup')]",
				"[concat(variables('factoryId'), '/datasets/ds_dim_date_lookup')]"
			]
		}
	]
}