{
	"name": "df_testing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_covid_destination",
						"type": "DatasetReference"
					},
					"name": "source"
				},
				{
					"dataset": {
						"referenceName": "Ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "countryLookup"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_lookup",
						"type": "DatasetReference"
					},
					"name": "dimDateLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_covid_destination",
						"type": "DatasetReference"
					},
					"name": "sinkStream"
				}
			],
			"transformations": [
				{
					"name": "lookupCountry"
				},
				{
					"name": "DerivedStreamYearweek"
				},
				{
					"name": "aggregateStream"
				},
				{
					"name": "joinStream"
				},
				{
					"name": "selectStream"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          year_week as string,",
				"          new_cases as integer,",
				"          tests_done as integer,",
				"          population as integer,",
				"          testing_rate as double,",
				"          positivity_rate as double,",
				"          testing_data_source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:['covid/Testing']) ~> source",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:['covid/country_lookup']) ~> countryLookup",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:['covid/dim_date_lookup']) ~> dimDateLookup",
				"source, countryLookup lookup(source@country == countryLookup@country,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookupCountry",
				"dimDateLookup derive(formatted_Year_week = year + '-W' + right(year_week,2)) ~> DerivedStreamYearweek",
				"DerivedStreamYearweek aggregate(groupBy(formatted_Year_week),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> aggregateStream",
				"lookupCountry, aggregateStream join(year_week == formatted_Year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinStream",
				"joinStream select(mapColumn(",
				"          country,",
				"          year_week,",
				"          new_cases,",
				"          tests_done,",
				"          population,",
				"          testing_rate,",
				"          positivity_rate,",
				"          testing_data_source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          week_start_date,",
				"          week_end_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectStream",
				"selectStream sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     filePattern:'testingreport',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkStream"
			]
		}
	}
}