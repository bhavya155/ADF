{
	"name": "df_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_covid_destination",
						"type": "DatasetReference"
					},
					"name": "source",
					"description": "hospital admission dataset"
				},
				{
					"dataset": {
						"referenceName": "Ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "Countrylookup"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_lookup",
						"type": "DatasetReference"
					},
					"name": "dimdateLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_covid_destination",
						"type": "DatasetReference"
					},
					"name": "sinkDaily"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_covid_destination",
						"type": "DatasetReference"
					},
					"name": "sinkWeeklyStream"
				}
			],
			"transformations": [
				{
					"name": "selectReqCol"
				},
				{
					"name": "lookupStream"
				},
				{
					"name": "selectStream"
				},
				{
					"name": "splitStream"
				},
				{
					"name": "pivotStream"
				},
				{
					"name": "sortStream"
				},
				{
					"name": "derivedColumn"
				},
				{
					"name": "aggregateStream"
				},
				{
					"name": "joinStream"
				},
				{
					"name": "pivotWeeklyStream"
				},
				{
					"name": "sortWeelyStream"
				},
				{
					"name": "Finalselect"
				},
				{
					"name": "selectWeeklyFinal"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     wildcardPaths:['covid/Hospital_admissions']) ~> source",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Countrylookup",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     wildcardPaths:['covid/dim_date_lookup']) ~> dimdateLookup",
				"source select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqCol",
				"selectReqCol, Countrylookup lookup(selectReqCol@country == Countrylookup@country,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookupStream",
				"lookupStream select(mapColumn(",
				"          country = selectReqCol@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectStream",
				"selectStream split(substring(indicator,1,instr(indicator,' '))=='Daily ',",
				"     disjoint: false) ~> splitStream@(DailyStream, Weeklystream)",
				"splitStream@DailyStream pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     {} = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotStream",
				"pivotStream sort(desc(reported_date, false)) ~> sortStream",
				"dimdateLookup derive(year_week_date = year + '-W' + right(year_week,2)) ~> derivedColumn",
				"derivedColumn aggregate(groupBy(year_week_date),",
				"     reported_week_start_date = min(date),",
				"          reported_week_end_date = max(date)) ~> aggregateStream",
				"splitStream@Weeklystream, aggregateStream join(reported_year_week == year_week_date,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinStream",
				"joinStream pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_year_week,",
				"          reported_week_start_date,",
				"          reported_week_end_date,",
				"          source,",
				"          population),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     {} = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotWeeklyStream",
				"pivotWeeklyStream sort(desc(reported_year_week, false)) ~> sortWeelyStream",
				"sortStream select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          Daily_hospital_occupancy = {Daily hospital occupancy},",
				"          Daily_ICU_occupancy = {Daily ICU occupancy},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Finalselect",
				"sortWeelyStream select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_year_week,",
				"          reported_week_start_date,",
				"          reported_week_end_date,",
				"          new_hospital_occupancy_count = {Weekly new hospital admissions per 100k},",
				"          new_ICU_occupancy_count = {Weekly new ICU admissions per 100k},",
				"          source,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWeeklyFinal",
				"Finalselect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['hospital_daily_report'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDaily",
				"selectWeeklyFinal sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     filePattern:'hospital_weekly_report',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkWeeklyStream"
			]
		}
	}
}